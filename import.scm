(define-public go-github-com-rs-xid
  (package
    (name "go-github-com-rs-xid")
    (version "1.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rs/xid")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0mbdjp56w3nkxy0cvifls6abv13yy315jsa8in29lc05csdhni5v"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/rs/xid"))
    (home-page "https://github.com/rs/xid")
    (synopsis "Globally Unique ID Generator")
    (description
     "Xid is a globally unique ID generator suited for web scale. It used the
@url{https://www.mongodb.com/docs/manual/reference/method/ObjectId/, Mongo Object ID
algorithm} to generate globally unique ID's with a different
serialization (@url{https://datatracker.ietf.org/doc/html/rfc4648#page-10,
\"base32hex\"}) to make it shorter as a string. Other ID formats are UUID, shortuuid,
Snowflake, MongoID. They vary between 8 bytes and 16 bytes, serialized between 20 and
36 chars.")
    (license license:expat)))

(define-public go-github-com-coreos-go-systemd-v22
  (package
    (name "go-github-com-coreos-go-systemd-v22")
    (version "22.5.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/coreos/go-systemd")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vhb4cw8nw9nx8mprx829xv8w4jnwhc2lcyjljzlfafsn8nx5nyf"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/coreos/go-systemd/v22"))
    (propagated-inputs (list go-github-com-godbus-dbus-v5)))
    (home-page "https://github.com/coreos/go-systemd")
    (synopsis "Go bindings to Systemd")
    (description "Go bindings to systemd. The project has several packages:
@itemize @bullet
@item
activation - for writing and using socket activation from Go.
@item
daemon - for notifying systemd of service status changes.
@item
dbus - for starting/stopping/inspecting running services and units.
@item
journal - for writing to systemd's logging service, journald.
@item
sdjournal - for reading from journald by wrapping its C API.
@item
login1 - for integration with the systemd logind API.
@item
machine1 - for registering machines/containers with systemd.
@item
unit - for (de)serialization and comparison of unit files.
")
    (license license:asl2.0)))

(define-public go-github-com-h2non-filetype
  (package
    (name "go-github-com-h2non-filetype")
    (version "1.1.3")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/h2non/filetype")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "05xad4dfimlccg3hy0fpcns4fl7yj17dbpdf6ijwbp6k4ryzy9cm"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/h2non/filetype"))
    (home-page "https://github.com/h2non/filetype")
    (synopsis "filetype")
    (description
     "Small and dependency free @url{https://golang.org,Go} package to infer file and
MIME type checking the
@url{https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files,magic
numbers} signature.")
    (license license:expat)))

(define-public go-github-com-gitleaks-go-gitdiff
  (package
    (name "go-github-com-gitleaks-go-gitdiff")
    (version "0.9.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gitleaks/go-gitdiff")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "15fkdqywzlvhgfq56n67c0khvpficd57xs6sv005f6s5ggy2pf7l"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/gitleaks/go-gitdiff"))
    (home-page "https://github.com/gitleaks/go-gitdiff")
    (synopsis "go-gitdiff")
    (description
     "This package provides a Go library for parsing and applying patches generated by
@code{git diff}, @code{git show}, and @code{git format-patch}.  It can also
parse and apply unified diffs generated by the standard @code{diff} tool.

It supports standard line-oriented text patches and Git binary patches, and aims to
parse anything accepted by the @cdoe{git apply} command.")
    (license license:expat)))

(define-public go-github-com-fatih-semgroup
  (package
    (name "go-github-com-fatih-semgroup")
    (version "1.2.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/fatih/semgroup")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "16fb3mz7jg0l8m9a1xqvm16560via9l7kpyl2v5ay2kbm4jvsnq4"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/fatih/semgroup"))
    (propagated-inputs `(("go-golang-org-x-sync" ,go-golang-org-x-sync)))
    (home-page "https://github.com/fatih/semgroup")
    (synopsis "semgroup")
    (description
     "Package semgroup provides synchronization and error propagation, for groups of
goroutines working on subtasks of a common task.  It uses a weighted semaphore
implementation to make sure that only a number of maximum tasks can be run at
any time.

Unlike @url{golang.org/x/sync/errgroup}, it doesn't return the first non-nil error, rather it accumulates all errors and returns a set of errors, allowing each task to fullfil their task.")
    (license license:bsd-3)))

(define-public go-github-com-charmbracelet-lipgloss
  (package
    (name "go-github-com-charmbracelet-lipgloss")
    (version "0.9.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/charmbracelet/lipgloss")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "177zmz9x7h67zvcdlbs995bvq57s9snl1m74dsq8jn64d9nsp6x3"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/charmbracelet/lipgloss"))
    (propagated-inputs `(("go-github-com-muesli-termenv" ,go-github-com-muesli-termenv)
                         ("go-github-com-muesli-reflow" ,go-github-com-muesli-reflow)
                         ("go-github-com-mattn-go-runewidth" ,go-github-com-mattn-go-runewidth)))
    (home-page "https://github.com/charmbracelet/lipgloss")
    (synopsis "Lip Gloss")
    (description
     "Style definitions for nice terminal layouts. Built with TUIs (text user
interfaces) in mind. It takes an expressive, declarative approach to terminal
rendering, similar to CSS.")
    (license license:expat)))

(define-public go-github-com-rs-zerolog
  (package
    (name "go-github-com-rs-zerolog")
    (version "1.31.0")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/rs/zerolog")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0lysq2gbfaszbw9qk1808gyii43pfxi5yfrys80d8rq5hymdk9zl"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/rs/zerolog"))
    (propagated-inputs `(("go-github-com-rs-xid" ,go-github-com-rs-xid)
                         ("go-github-com-pkg-errors" ,go-github-com-pkg-errors)
                         ("go-github-com-mattn-go-colorable" ,go-github-com-mattn-go-colorable)
                         ("go-github-com-coreos-go-systemd-v22" ,go-github-com-coreos-go-systemd-v22)))
    (home-page "https://github.com/rs/zerolog")
    (synopsis "Zero Allocation JSON Logger for Go")
    (description
     "Package zerolog provides a lightweight logging library dedicated to JSON
logging. Zerolog's API is designed to provide both a great developer experience and
stunning performance. Its unique chaining API allows zerolog to write JSON (or CBOR)
log events by avoiding allocations and reflection.")
    (license license:expat)))

(define-public go-github-com-lucasjones-reggen
  (package
    (name "go-github-com-lucasjones-reggen")
    (version "0.0.0-20200904144131-37ba4fa293bb")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lucasjones/reggen")
             (commit (go-version->git-ref version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0r66s2qsmgas8ij0yibz63v3rjn7sivgqadpldzaknzjl8nj4pdr"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/lucasjones/reggen"))
    (home-page "https://github.com/lucasjones/reggen")
    (synopsis "Generate text based on regex definitions")
    (description "@code{reggen} generates text based on regex definitions.")
    (license license:expat)))

(define-public go-github-com-petar-dambovaliev-aho-corasick
  (package
    (name "go-github-com-petar-dambovaliev-aho-corasick")
    (version "0.0.0-20230725210150-fb29fc3c913e")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/petar-dambovaliev/aho-corasick")
             (commit (go-version->git-ref version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "1vf0riwi3rkqcpdixr0q0b1caig2mj39qm41v8ss5zgaphw1cy11"))))
    (build-system go-build-system)
    (arguments
     (list
      #:import-path "github.com/petar-dambovaliev/aho-corasick"))
    (home-page "https://github.com/petar-dambovaliev/aho-corasick")
    (synopsis "String matching in Go via the Aho-corasick algorithm")
    (description
     "Efficient string matching in Golang via the Aho-Corasick Algorithm. Runs 3x faster
and uses memory than the next best Ahoâ€“Corasick algorithm implementation.")
    (license license:expat)))

(define-public go-github-com-zricethezav-gitleaks-v8
  (package
    (name "go-github-com-zricethezav-gitleaks-v8")
    (version "8.18.1")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gitleaks/gitleaks")
             (commit (string-append "v" version))))
       (file-name (git-file-name name version))
       (sha256
        (base32 "16nls19934pslyq09ykfdc6qwv994dsbcp0mr8r1j9aqbjx7yixz"))))
    (build-system go-build-system)
    (arguments
     (list
      #:go 1.19
      #:import-path "github.com/zricethezav/gitleaks/v8"))
    (propagated-inputs `(("go-github-com-petar-dambovaliev-aho-corasick" ,go-github-com-petar-dambovaliev-aho-corasick)
                         ("go-github-com-lucasjones-reggen" ,go-github-com-lucasjones-reggen)
                         ("go-github-com-stretchr-testify" ,go-github-com-stretchr-testify)
                         ("go-github-com-spf13-viper" ,go-github-com-spf13-viper)
                         ("go-github-com-spf13-cobra" ,go-github-com-spf13-cobra)
                         ("go-github-com-rs-zerolog" ,go-github-com-rs-zerolog)
                         ("go-github-com-h2non-filetype" ,go-github-com-h2non-filetype)
                         ("go-github-com-gitleaks-go-gitdiff" ,go-github-com-gitleaks-go-gitdiff)
                         ("go-github-com-fatih-semgroup" ,go-github-com-fatih-semgroup)
                         ("go-github-com-charmbracelet-lipgloss" ,go-github-com-charmbracelet-lipgloss)))
    (home-page "https://github.com/zricethezav/gitleaks")
    (synopsis "Security tool to detect secrets in Git history")
    (description
     "Gitleaks is a SAST tool for @strong{detecting} and @strong{preventing}
hardcoded secrets like passwords, api keys, and tokens in git repos.  Gitleaks
is an @strong{easy-to-use, all-in-one solution} for detecting secrets, past or
present, in your code.")
    (license license:expat)))
